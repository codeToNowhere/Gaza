# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# ---------------------------------------------------
# Global ignores (applies to any directory in the repo)
# ---------------------------------------------------

# Node modules
# This single rule will ignore 'node_modules' folders wherever they appear
# within the repository (e.g., /client/node_modules, /server/node_modules)
node_modules/

# Yarn Plug'n'Play (if used)
.pnp
.pnp.js

# macOS specific files
.DS_Store

# Common editor/IDE specific files
.vscode/           # VSCode workspace settings (optional, remove if you want to share settings)
!.vscode/extensions.json # Keep this line to *not* ignore extensions.json if you want to share it
*.code-workspace   # VSCode workspace file
.idea/             # IntelliJ IDEA specific files
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# npm/yarn/pnpm logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log* # From new client gitignore

# Logs in general
logs/
*.log

# Environment variables
# Explicitly ignore .env files at various levels and names
.env
.env.local
.env.development
.env.test
.env.production
.env.development.local
.env.test.local
.env.production.local

# For files nested in subdirectories like client/ or server/
# The '/' at the end makes it match directories only, so we ensure it matches the files
# For example, to catch server/.env.development:
/server/.env.development
/server/.env.production
# You can also use a broader pattern if you expect .env files in other subdirectories
# For example, to ignore all files named .env.development anywhere:
**/.env.development
**/.env.production
# You can keep the general catch-alls too, as a fallback, but the explicit ones are key here
**/.env
**/.env.*
*.local # From new client gitignore, catches .env.local etc. broadly

# ---------------------------------------------------
# Client (Vite) specific ignores
# ---------------------------------------------------

# Production build output for Vite
dist/
dist-ssr/
# Old CRA build output - keep if you think it might still be generated by some old scripts
/client/build/
/client/coverage/ # Test coverage reports

# ---------------------------------------------------
# Server (Node/Express) specific ignores (if applicable for your project)
# ---------------------------------------------------

# Server-side specific build or temporary files
# For Node, you might have compiled JavaScript (e.g., if using TypeScript)
# or temporary files created during server operation.
# Example if you transpile TypeScript to a 'dist' folder in your server:
/server/dist/
/server/logs/ # Example: ignore server log files

# MongoDB specific ignores (if applicable for local development)
# e.g., if you have local MongoDB data files in your repo
/data/db/ # Common local MongoDB data directory
*.sqlite3 # If using SQLite instead of MongoDB, for example

# Uploads folder/photos
/server/uploads/